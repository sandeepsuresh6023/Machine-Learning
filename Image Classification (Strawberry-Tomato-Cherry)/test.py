# -*- coding: utf-8 -*-
"""programtest.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1P8xcP_tpYuups2YAqrumQtmybeyz07a9
"""

from keras.models import load_model
from keras.preprocessing.image import img_to_array, ImageDataGenerator
from imutils import paths
from sklearn.preprocessing import LabelBinarizer
import cv2
import os
import argparse
import keras
from keras.applications import mobilenet

import numpy as np
import random
import tensorflow as tf
import keras

SEED = 309
np.random.seed(SEED)
random.seed(SEED)
tf.set_random_seed(SEED)

def parse_args():
    """
    Pass arguments via command line
    :return: args: parsed args
    """
    # Parse the arguments, please do not change
    args = argparse.ArgumentParser()
    args.add_argument("--test_data_dir", default = "/content/drive/My Drive/data/Valid_data/",
                      help = "path to test_data_dir")
    args = vars(args.parse_args())
    return args

def load_images(test_data_dir, image_size = (300, 300)):
    """
    Load images from local directory
    :return: the image list (encoded as an array)
    """
    # loop over the input images
    images_data = []
    labels = []
    imagePaths = sorted(list(paths.list_images(test_data_dir)))
    for imagePath in imagePaths:
        # load the image, pre-process it, and store it in the data list
        image = cv2.imread(imagePath)
        image = cv2.resize(image, image_size)
        image = img_to_array(image)
        images_data.append(image)

        # extract the class label from the image path and update the
        # labels list
        label = imagePath.split(os.path.sep)[-2]
        labels.append(label)
    return images_data, sorted(labels)

def convert_img_to_array(images, labels):
    # Convert to numpy and do constant normalize
    X_test = np.array(images, dtype = "float") / 255.0
    y_test = np.array(labels)

    # Binarize the labels
    lb = LabelBinarizer()
    y_test = lb.fit_transform(y_test)

    return X_test, y_test

def evaluate(gen, no_of_steps):
#def evaluate(X_test, Y_test):
    # Load Model
	#The batch size that was specified here is specified in the test_batches variable in the main function.
    model = load_model('model/model.h5', custom_objects={'relu6':mobilenet.relu6})
    return model.evaluate_generator(gen, no_of_steps, verbose=1)
    #return model.evaluate(X_test, y_test, batch_size, verbose = 1)

if __name__ == '__main__':
    # Parse the arguments
    args = parse_args()

    # Test folder
    test_data_dir = args["test_data_dir"]
	
	#The load_images() function is not working. So ImageDataGenerator().flow_from_directory() in keras was used to load the images.
	#The batch size of 16 is specified here in test_batches.
    test_batches=ImageDataGenerator(preprocessing_function=keras.applications.mobilenet.preprocess_input).flow_from_directory(test_data_dir, target_size=(224,224), classes=['cherry','strawberry','tomato'], batch_size=16, shuffle=False)


    # Evaluation, please make sure that your training model uses "accuracy" as metrics, i.e., metrics=['accuracy']
    loss, accuracy = evaluate(test_batches, 18)
    print("loss={}, accuracy={}".format(loss, accuracy))

