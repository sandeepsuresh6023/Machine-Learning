# -*- coding: utf-8 -*-
"""anotherprogram.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rySYAiF9TR5LH--uvKB0zeaCE2KelITQ
"""



import numpy as np
import keras
from keras import backend as K
from keras.layers.core import Dense
from keras.optimizers import Adam
from keras.metrics import categorical_crossentropy
from keras.preprocessing.image import ImageDataGenerator
from keras.preprocessing import image
from keras.models import Model
from keras.applications import imagenet_utils
from keras.layers.convolutional import *
import itertools
import random
import tensorflow as tf

#The random seed is specified here so we can get reproducable results.
SEED = 309
np.random.seed(SEED)
random.seed(SEED)
tf.set_random_seed(SEED)

#The location of the training and validation data should be specified here.
train_path='/content/drive/My Drive/data/Train_data/'
valid_path='/content/drive/My Drive/data/Valid_data/'

#The images are converted to the required 224X224 size for mobilenet. The training and validation batches are specified.
#The images are taken from their respective training and validation directories.
train_batches=ImageDataGenerator(preprocessing_function=keras.applications.mobilenet.preprocess_input).flow_from_directory(train_path, target_size=(224,224), classes=['cherry','strawberry','tomato'], batch_size=300)
valid_batches=ImageDataGenerator(preprocessing_function=keras.applications.mobilenet.preprocess_input).flow_from_directory(valid_path, target_size=(224,224), classes=['cherry','strawberry','tomato'], batch_size=50)

mobile=keras.applications.mobilenet.MobileNet()

#The output is connected to the sixth to last layer of the original mobilenet model. The bottom 5 layers are removed
x=mobile.layers[-6].output
predictions=Dense(3, activation='softmax')(x)
model=Model(inputs=mobile.input, outputs=predictions)

#The last 23 layers set to be trainable. So they can be fine tuned.
for layer in model.layers[:-23]:
  layer.trainable=False

model.compile(Adam(lr=0.0001), loss='categorical_crossentropy', metrics=['accuracy'])

model.fit_generator(train_batches, steps_per_epoch=84, validation_data=valid_batches, validation_steps=6, epochs=30, verbose=2)

model.save('/content/drive/My Drive/data/model.h5')

